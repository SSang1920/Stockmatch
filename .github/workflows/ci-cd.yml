name: CI-CD

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: docker.io
  DOCKER_NAMESPACE: ${{ secrets.DOCKERHUB_USERNAME }}
  UNIFIED_IMAGE: ${{ env.DOCKER_NAMESPACE }}/stockmatch
  TEST_OPTIONAL: 'false'

jobs:
  ci-backend:
    name: Backend Gradle Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Build
        run: ./gradlew clean build -x test

      - name: Test
        continue-on-error: ${{ env.TEST_OPTIONAL == 'true' }}
        run: ./gradlew test

      - name: Upload test reports (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-report
          path: backend/build/reports/tests/test

  ci-frontend:
    name: Frontend Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install
        run: npm ci

      - name: Build
        env:
          VITE_API_BASE: /api
        run: npm run build

  build-and-push:
    name: Build & Push Docker Images
    needs: [ci-backend, ci-frontend]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Meta (backend)
        id: meta_backend
        uses: docker/metadata-action@v5
        with:
          image: ${{ env.UNIFIED_IMAGE }}
          tags: |
            type=sha,prefix=backend-sha-
            type=ref,event=branch,prefix=backend-
            type=semver,pattern={{version}},prefix=backend-

      - name: Meta (web)
        id: meta_web
        uses: docker/metadata-action@v5
        with:
          image: ${{ env.UNIFIED_IMAGE }}
          tags: |
            type=sha,prefix=web-sha-
            type=ref,event=branch,prefix=web-
            type=semver,pattern={{version}},prefix=web-

      - name: Build & Push Backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta_backend.outputs.tags }}
          labels: ${{ steps.meta_backend.outputs.labels }}
          cache-from: type=registry,ref=${{ env.UNIFIED_IMAGE }}:backend-buildcache
          cache-to: type=registry,ref=${{ env.UNIFIED_IMAGE }}:backend-buildcache,mode=max

      - name: Build & Push Web
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta_web.outputs.tags }}
          labels: ${{ steps.meta_web.outputs.labels }}
          cache-from: type=registry,ref=${{ env.UNIFIED_IMAGE }}:web-buildcache
          cache-to: type=registry,ref=${{ env.UNIFIED_IMAGE }}:web-buildcache,mode=max

  deploy:
    name: Deploy to Server
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
    steps:
      - name: Deploy via SSH (docker compose pull & up)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            cd /srv/stockmatch
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            docker compose pull
            docker compose --profile intra --profile app up -d
            docker system prune -f